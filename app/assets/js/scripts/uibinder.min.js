const path=require("path");const AuthManager=require("./assets/js/authmanager.min");const ConfigManager=require("./assets/js/configmanager.min");const DistroManager=require("./assets/js/distromanager.min");const Lang=require("./assets/js/langloader.min");let rscShouldLoad=false;let fatalStartupError=false;const VIEWS={landing:"#landingContainer",login:"#loginContainer",settings:"#settingsContainer",welcome:"#welcomeContainer"};let currentView;function switchView(current,next,currentFadeTime=250,nextFadeTime=250,onCurrentFade=()=>{},onNextFade=()=>{}){currentView=next;$(`${current}`).fadeOut(currentFadeTime,()=>{onCurrentFade();$(`${next}`).fadeIn(nextFadeTime,()=>{onNextFade()})})}function getCurrentView(){return currentView}function showMainUI(data){if(!isDev){loggerAutoUpdater.log("Initializing...");ipcRenderer.send("autoUpdateAction","initAutoUpdater",ConfigManager.getAllowPrerelease())}setTimeout(()=>{let loadingImage=document.getElementById("loadCenterImage");loadingImage.setAttribute("inflation","");$("#loadingContainer").fadeOut(150,()=>{loadingImage.removeAttribute("class");loadingImage.removeAttribute("inflation")})},0);prepareSettings(true);updateSelectedServer(data.getServer(ConfigManager.getSelectedServer()));refreshServerStatus();loadDiscord();setTimeout(()=>{document.getElementById("frameBar").style.backgroundColor="rgba(0, 0, 0, 0.5)";randomiseBackground();$("#main").show();const isLoggedIn=Object.keys(ConfigManager.getAuthAccounts()).length>0;validateSelectedAccount();if(ConfigManager.isFirstLaunch()){currentView=VIEWS.welcome;$(VIEWS.welcome).fadeIn(100);if(hasRPC){DiscordWrapper.updateDetails("Welcome and continue.");DiscordWrapper.updateState("Launcher Setup")}}else{if(isLoggedIn){currentView=VIEWS.landing;$(VIEWS.landing).fadeIn(100);if(hasRPC&&!ConfigManager.isFirstLaunch()){if(ConfigManager.getSelectedServer()){const serv=DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer());DiscordWrapper.updateDetails("Ready to Play!");DiscordWrapper.updateState("Server: "+serv.getName())}else{DiscordWrapper.updateDetails("Landing Screen...")}}}else{currentView=VIEWS.login;$(VIEWS.login).fadeIn(100);if(hasRPC){DiscordWrapper.updateDetails("Adding an Account...");DiscordWrapper.clearState()}}}},250);initNews().then(()=>{$("#newsContainer *").attr("tabindex","-1")})}function showFatalStartupError(){setTimeout(()=>{$("#loadingContainer").fadeOut(150,()=>{document.getElementById("overlayContainer").style.background="none";setOverlayContent("Fatal Error: Unable to Load Distribution Index","A connection could not be established to our servers to download the distribution index. No local copies were available to load. <br><br>The distribution index is an essential file which provides the latest server information. The launcher is unable to start without it. Ensure you are connected to the internet and relaunch the application. <br><br>It is very possible that the launcher has updated and changed the location for the distribution index file. We would recommend installing the latest version of the launcher from our releases page. <br><br>If you continue to have issues, please contact us on the ModRealms Discord server.","Download Latest Version","Join our Discord");setOverlayHandler(()=>{shell.openExternal("https://github.com/ModRealms-Network/HeliosLauncher/releases")});setDismissHandler(()=>{shell.openExternal("https://discord.gg/tKKeTdc")});toggleOverlay(true,true)})},750)}function onDistroRefresh(data){updateSelectedServer(data.getServer(ConfigManager.getSelectedServer()));refreshServerStatus();initNews();syncModConfigurations(data)}function syncModConfigurations(data){const syncedCfgs=[];for(let serv of data.getServers()){const id=serv.getID();const mdls=serv.getModules();const cfg=ConfigManager.getModConfiguration(id);if(cfg!=null){const modsOld=cfg.mods;const mods={};for(let mdl of mdls){const type=mdl.getType();if(type===DistroManager.Types.ForgeMod||type===DistroManager.Types.LiteMod||type===DistroManager.Types.LiteLoader){if(!mdl.getRequired().isRequired()){const mdlID=mdl.getVersionlessID();if(modsOld[mdlID]==null){mods[mdlID]=scanOptionalSubModules(mdl.getSubModules(),mdl)}else{mods[mdlID]=mergeModConfiguration(modsOld[mdlID],scanOptionalSubModules(mdl.getSubModules(),mdl),false)}}else{if(mdl.hasSubModules()){const mdlID=mdl.getVersionlessID();const v=scanOptionalSubModules(mdl.getSubModules(),mdl);if(typeof v==="object"){if(modsOld[mdlID]==null){mods[mdlID]=v}else{mods[mdlID]=mergeModConfiguration(modsOld[mdlID],v,true)}}}}}}syncedCfgs.push({id:id,mods:mods})}else{const mods={};for(let mdl of mdls){const type=mdl.getType();if(type===DistroManager.Types.ForgeMod||type===DistroManager.Types.LiteMod||type===DistroManager.Types.LiteLoader){if(!mdl.getRequired().isRequired()){mods[mdl.getVersionlessID()]=scanOptionalSubModules(mdl.getSubModules(),mdl)}else{if(mdl.hasSubModules()){const v=scanOptionalSubModules(mdl.getSubModules(),mdl);if(typeof v==="object"){mods[mdl.getVersionlessID()]=v}}}}}syncedCfgs.push({id:id,mods:mods})}}ConfigManager.setModConfigurations(syncedCfgs);ConfigManager.save()}function scanOptionalSubModules(mdls,origin){if(mdls!=null){const mods={};for(let mdl of mdls){const type=mdl.getType();if(type===DistroManager.Types.ForgeMod||type===DistroManager.Types.LiteMod||type===DistroManager.Types.LiteLoader){if(!mdl.getRequired().isRequired()){mods[mdl.getVersionlessID()]=scanOptionalSubModules(mdl.getSubModules(),mdl)}else{if(mdl.hasSubModules()){const v=scanOptionalSubModules(mdl.getSubModules(),mdl);if(typeof v==="object"){mods[mdl.getVersionlessID()]=v}}}}}if(Object.keys(mods).length>0){const ret={mods:mods};if(!origin.getRequired().isRequired()){ret.value=origin.getRequired().isDefault()}return ret}}return origin.getRequired().isDefault()}function mergeModConfiguration(o,n,nReq=false){if(typeof o==="boolean"){if(typeof n==="boolean")return o;else if(typeof n==="object"){if(!nReq){n.value=o}return n}}else if(typeof o==="object"){if(typeof n==="boolean")return typeof o.value!=="undefined"?o.value:true;else if(typeof n==="object"){if(!nReq){n.value=typeof o.value!=="undefined"?o.value:true}const newMods=Object.keys(n.mods);for(let i=0;i<newMods.length;i++){const mod=newMods[i];if(o.mods[mod]!=null){n.mods[mod]=mergeModConfiguration(o.mods[mod],n.mods[mod])}}return n}}return n}async function validateSelectedAccount(){const selectedAcc=ConfigManager.getSelectedAccount();if(selectedAcc!=null){const val=await AuthManager.validateSelected();if(!val){ConfigManager.removeAuthAccount(selectedAcc.uuid);ConfigManager.save();const accLen=Object.keys(ConfigManager.getAuthAccounts()).length;setOverlayContent("Failed to Refresh Login",`We were unable to refresh the login for <strong>${selectedAcc.displayName}</strong>. Please ${accLen>0?"select another account or ":""} login again.`,"Login","Select Another Account");setOverlayHandler(()=>{document.getElementById("loginUsername").value=selectedAcc.username;validateEmail(selectedAcc.username);loginViewOnSuccess=getCurrentView();loginViewOnCancel=getCurrentView();if(accLen>0){loginViewCancelHandler=()=>{ConfigManager.addAuthAccount(selectedAcc.uuid,selectedAcc.accessToken,selectedAcc.username,selectedAcc.displayName);ConfigManager.save();validateSelectedAccount()};loginCancelEnabled(true)}toggleOverlay(false);switchView(getCurrentView(),VIEWS.login);if(hasRPC){DiscordWrapper.updateDetails("Adding an Account...");DiscordWrapper.clearState()}});setDismissHandler(()=>{if(accLen>1){prepareAccountSelectionList();$("#overlayContent").fadeOut(150,()=>{bindOverlayKeys(true,"accountSelectContent",true);$("#accountSelectContent").fadeIn(150)})}else{const accountsObj=ConfigManager.getAuthAccounts();const accounts=Array.from(Object.keys(accountsObj),v=>accountsObj[v]);setSelectedAccount(accounts[0].uuid);toggleOverlay(false)}});toggleOverlay(true,accLen>0)}else{return true}}else{return true}}function setSelectedAccount(uuid){const authAcc=ConfigManager.setSelectedAccount(uuid);ConfigManager.save();updateSelectedAccount(authAcc);validateSelectedAccount()}document.addEventListener("readystatechange",function(){if(document.readyState==="interactive"||document.readyState==="complete"){if(rscShouldLoad){rscShouldLoad=false;if(!fatalStartupError){const data=DistroManager.getDistribution();showMainUI(data)}else{showFatalStartupError()}}}},false);ipcRenderer.on("distributionIndexDone",(event,res)=>{if(res){const data=DistroManager.getDistribution();syncModConfigurations(data);if(document.readyState==="interactive"||document.readyState==="complete"){showMainUI(data)}else{rscShouldLoad=true}}else{fatalStartupError=true;if(document.readyState==="interactive"||document.readyState==="complete"){showFatalStartupError()}else{rscShouldLoad=true}}});ipcRenderer.on("cachedDistributionNotification",(event,res)=>{if(res){setTimeout(()=>{setOverlayContent("Warning: Cached Distribution Startup","We were unable to grab the latest server information from the internet upon startup, so we have used a previously stored version instead.<br><br>This is not recommended, and you should restart your client to fix this to avoid your modpack files being out of date. If you wish to continue using the launcher, you can try again at any time by pressing the refresh button on the landing screen.<br><br>If this continues to occur, and you are not too sure why, come and see us on Discord!","Understood.","Join our Discord");setOverlayHandler(()=>{toggleOverlay(false)});setDismissHandler(()=>{shell.openExternal("https://discord.gg/tKKeTdc")});toggleOverlay(true,true)},2e3)}});