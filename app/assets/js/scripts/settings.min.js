const os=require("os");const semver=require("semver");const{JavaGuard}=require("./assets/js/assetguard");const DropinModUtil=require("./assets/js/dropinmodutil.min");const loggerSettings=LoggerUtil("%c[Settings]","color: #353232; font-weight: bold");const settingsState={invalid:new Set};function bindSettingsSelect(){for(let ele of document.getElementsByClassName("settingsSelectContainer")){const selectedDiv=ele.getElementsByClassName("settingsSelectSelected")[0];selectedDiv.onclick=e=>{e.stopPropagation();closeSettingsSelect(e.target);e.target.nextElementSibling.toggleAttribute("hidden");e.target.classList.toggle("select-arrow-active")}}}function closeSettingsSelect(el){for(let ele of document.getElementsByClassName("settingsSelectContainer")){const selectedDiv=ele.getElementsByClassName("settingsSelectSelected")[0];const optionsDiv=ele.getElementsByClassName("settingsSelectOptions")[0];if(!(selectedDiv===el)){selectedDiv.classList.remove("select-arrow-active");optionsDiv.setAttribute("hidden","")}}}document.addEventListener("click",closeSettingsSelect);bindSettingsSelect();function bindFolderOpeners(){for(let ele of document.getElementsByClassName("settingsFolderOpenButton")){ele.onclick=async e=>{const pathId=ele.getAttribute("pathId");if(pathId){if(pathId==="DataDirectory"){shell.openPath(ConfigManager.getDataDirectory())}}}}}bindFolderOpeners();function bindFileSelectors(){for(let ele of document.getElementsByClassName("settingsFileSelButton")){ele.onclick=async e=>{const isJavaExecSel=ele.id==="settingsJavaExecSel";const directoryDialog=ele.hasAttribute("dialogDirectory")&&ele.getAttribute("dialogDirectory")=="true";const properties=directoryDialog?["openDirectory","createDirectory"]:["openFile"];const options={properties:properties};if(ele.hasAttribute("dialogTitle")){options.title=ele.getAttribute("dialogTitle")}if(isJavaExecSel&&process.platform==="win32"){options.filters=[{name:"Executables",extensions:["exe"]},{name:"All Files",extensions:["*"]}]}const res=await remote.dialog.showOpenDialog(remote.getCurrentWindow(),options);if(!res.canceled){ele.previousElementSibling.value=res.filePaths[0];if(isJavaExecSel){populateJavaExecDetails(ele.previousElementSibling.value)}}}}}bindFileSelectors();function initSettingsValidators(){const sEls=document.getElementById("settingsContainer").querySelectorAll("[cValue]");Array.from(sEls).map((v,index,arr)=>{const vFn=ConfigManager["validate"+v.getAttribute("cValue")];if(typeof vFn==="function"){if(v.tagName==="INPUT"){if(v.type==="number"||v.type==="text"){v.addEventListener("keyup",e=>{const v=e.target;if(!vFn(v.value)){settingsState.invalid.add(v.id);v.setAttribute("error","");settingsSaveDisabled(true)}else{if(v.hasAttribute("error")){v.removeAttribute("error");settingsState.invalid.delete(v.id);if(settingsState.invalid.size===0){settingsSaveDisabled(false)}}}})}}}})}function initSettingsValues(){const sEls=document.getElementById("settingsContainer").querySelectorAll("[cValue]");Array.from(sEls).map((v,index,arr)=>{const cVal=v.getAttribute("cValue");const gFn=ConfigManager["get"+cVal];if(typeof gFn==="function"){if(v.tagName==="INPUT"){if(v.type==="number"||v.type==="text"){if(cVal==="JavaExecutable"){populateJavaExecDetails(v.value);v.value=gFn()}else if(cVal==="DataDirectory"){v.value=gFn()}else if(cVal==="ServerCode"){v.value=gFn()}else if(cVal==="JVMOptions"){v.value=gFn().join(" ")}else{v.value=gFn()}}else if(v.type==="checkbox"){v.checked=gFn()}}else if(v.tagName==="DIV"){if(v.classList.contains("rangeSlider")){if(cVal==="MinRAM"||cVal==="MaxRAM"){let val=gFn();if(val.endsWith("M")){val=Number(val.substring(0,val.length-1))/1e3}else{val=Number.parseFloat(val)}v.setAttribute("value",val)}else{v.setAttribute("value",Number.parseFloat(gFn()))}}}}})}function saveSettingsValues(){const sEls=document.getElementById("settingsContainer").querySelectorAll("[cValue]");Array.from(sEls).map((v,index,arr)=>{const cVal=v.getAttribute("cValue");const sFn=ConfigManager["set"+cVal];if(typeof sFn==="function"){if(v.tagName==="INPUT"){if(v.type==="number"||v.type==="text"){if(cVal==="JVMOptions"){sFn(v.value.split(" "))}else{sFn(v.value)}}else if(v.type==="checkbox"){sFn(v.checked);if(cVal==="AllowPrerelease"){changeAllowPrerelease(v.checked)}}}else if(v.tagName==="DIV"){if(v.classList.contains("rangeSlider")){if(cVal==="MinRAM"||cVal==="MaxRAM"){let val=Number(v.getAttribute("value"));if(val%1>0){val=val*1e3+"M"}else{val=val+"G"}sFn(val)}else{sFn(v.getAttribute("value"))}}}}})}let selectedSettingsTab="settingsTabAccount";function settingsTabScrollListener(e){if(e.target.scrollTop>Number.parseFloat(getComputedStyle(e.target.firstElementChild).marginTop)){document.getElementById("settingsContainer").setAttribute("scrolled","")}else{document.getElementById("settingsContainer").removeAttribute("scrolled")}}function setupSettingsTabs(){Array.from(document.getElementsByClassName("settingsNavItem")).map(val=>{if(val.hasAttribute("rSc")){val.onclick=()=>{settingsNavItemListener(val)}}})}function settingsNavItemListener(ele,fade=true){if(ele.hasAttribute("selected")){return}const navItems=document.getElementsByClassName("settingsNavItem");for(let i=0;i<navItems.length;i++){if(navItems[i].hasAttribute("selected")){navItems[i].removeAttribute("selected")}}ele.setAttribute("selected","");let prevTab=selectedSettingsTab;selectedSettingsTab=ele.getAttribute("rSc");document.getElementById(prevTab).onscroll=null;document.getElementById(selectedSettingsTab).onscroll=settingsTabScrollListener;if(fade){$(`#${prevTab}`).fadeOut(150,()=>{$(`#${selectedSettingsTab}`).fadeIn({duration:150,start:()=>{settingsTabScrollListener({target:document.getElementById(selectedSettingsTab)})}})})}else{$(`#${prevTab}`).hide(0,()=>{$(`#${selectedSettingsTab}`).show({duration:0,start:()=>{settingsTabScrollListener({target:document.getElementById(selectedSettingsTab)})}})})}}const settingsNavDone=document.getElementById("settingsNavDone");function settingsSaveDisabled(v){settingsNavDone.disabled=v}settingsNavDone.onclick=()=>{saveSettingsValues();saveModConfiguration();ConfigManager.save();saveDropinModConfiguration();saveShaderpackSettings();saveResourcePackSettings();switchView(getCurrentView(),VIEWS.landing);if(hasRPC){if(ConfigManager.getSelectedServer()){const serv=DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer());DiscordWrapper.updateDetails("Près à jouer!");DiscordWrapper.updateState("Server: "+serv.getName())}else{DiscordWrapper.updateDetails("En chargement...")}}};document.getElementById("settingsAddAccount").onclick=e=>{switchView(getCurrentView(),VIEWS.login,250,250,()=>{loginViewOnCancel=VIEWS.settings;loginViewOnSuccess=VIEWS.settings;loginCancelEnabled(true);if(hasRPC){DiscordWrapper.updateDetails("Adding an Account...");DiscordWrapper.clearState()}})};function bindServerCodeButtons(){document.getElementById("settingsAddServerCode").onclick=()=>{for(let ele of document.getElementsByClassName("settingsInputServerCodeVal")){const code=ele.value;ele.value="";if(!ConfigManager.getServerCodes().includes(code)&&code){ConfigManager.getServerCodes().push(code);ConfigManager.save();loggerSettings.log("Added server code to configuration and saved it");prepareLauncherTab()}else{loggerSettings.log("Server code already exists or is empty, not adding.")}}};const sEls=document.querySelectorAll("[remcode]");Array.from(sEls).map((v,index,arr)=>{v.onclick=()=>{if(v.hasAttribute("remcode")){const code=v.getAttribute("remcode");if(ConfigManager.getServerCodes().includes(code)){ConfigManager.getServerCodes().splice(ConfigManager.getServerCodes().indexOf(code),1);ConfigManager.save();loggerSettings.log("Added removed code from configuration and saved it");prepareLauncherTab()}}loggerSettings.log("Server code doesnt exist!, not removing.")}})}function bindAuthAccountSelect(){Array.from(document.getElementsByClassName("settingsAuthAccountSelect")).map(val=>{val.onclick=e=>{if(val.hasAttribute("selected")){return}const selectBtns=document.getElementsByClassName("settingsAuthAccountSelect");for(let i=0;i<selectBtns.length;i++){if(selectBtns[i].hasAttribute("selected")){selectBtns[i].removeAttribute("selected");selectBtns[i].innerHTML="Select Account"}}val.setAttribute("selected","");val.innerHTML="Selected Account &#10004;";setSelectedAccount(val.closest(".settingsAuthAccount").getAttribute("uuid"))}})}function bindAuthAccountLogOut(){Array.from(document.getElementsByClassName("settingsAuthAccountLogOut")).map(val=>{val.onclick=e=>{let isLastAccount=false;if(Object.keys(ConfigManager.getAuthAccounts()).length===1){isLastAccount=true;setOverlayContent("Warning<br>This is Your Last Account","In order to use the launcher you must be logged into at least one account. You will need to login again after.<br><br>Are you sure you want to log out?","I'm Sure","Cancel");setOverlayHandler(()=>{processLogOut(val,isLastAccount);toggleOverlay(false);switchView(getCurrentView(),VIEWS.login);if(hasRPC){DiscordWrapper.updateDetails("Adding an Account...");DiscordWrapper.clearState()}});setDismissHandler(()=>{toggleOverlay(false)});toggleOverlay(true,true)}else{processLogOut(val,isLastAccount)}}})}let data=null;function processLogOut(val,isLastAccount,skip=false){data={val:val,isLastAccount:isLastAccount};const parent=val.closest(".settingsAuthAccount");const uuid=parent.getAttribute("uuid");if(!skip){const account=ConfigManager.getAuthAccount(uuid);if(account.type==="microsoft"){toggleOverlay(true,false,"msOverlay");ipcRenderer.send("openMSALogoutWindow","open")}}const prevSelAcc=ConfigManager.getSelectedAccount();AuthManager.removeAccount(uuid).then(()=>{if(!isLastAccount&&uuid===prevSelAcc.uuid){const selAcc=ConfigManager.getSelectedAccount();refreshAuthAccountSelected(selAcc.uuid);updateSelectedAccount(selAcc);validateSelectedAccount()}});$(parent).fadeOut(150,()=>{parent.remove()})}ipcRenderer.on("MSALogoutWindowReply",(event,...args)=>{toggleOverlay(false,false,"msOverlay");processLogOut(data.val,data.isLastAccount,true)});function refreshAuthAccountSelected(uuid){Array.from(document.getElementsByClassName("settingsAuthAccount")).map(val=>{const selBtn=val.getElementsByClassName("settingsAuthAccountSelect")[0];if(uuid===val.getAttribute("uuid")){selBtn.setAttribute("selected","");selBtn.innerHTML="Selected Account &#10004;"}else{if(selBtn.hasAttribute("selected")){selBtn.removeAttribute("selected")}selBtn.innerHTML="Select Account"}})}const settingsCurrentAccounts=document.getElementById("settingsCurrentAccounts");function populateAuthAccounts(){const authAccounts=ConfigManager.getAuthAccounts();const authKeys=Object.keys(authAccounts);if(authKeys.length===0){return}const selectedUUID=ConfigManager.getSelectedAccount().uuid;let authAccountStr="";authKeys.map(val=>{const acc=authAccounts[val];authAccountStr+=`<div class="settingsAuthAccount" uuid="${acc.uuid}">
            <div class="settingsAuthAccountLeft">
                <img class="settingsAuthAccountImage" alt="${acc.displayName}" src="https://mc-heads.net/body/${acc.uuid}/60">
            </div>
            <div class="settingsAuthAccountRight">
                <div class="settingsAuthAccountDetails">
                    <div class="settingsAuthAccountDetailPane">
                        <div class="settingsAuthAccountDetailTitle">Nom d'utilisateur</div>
                        <div class="settingsAuthAccountDetailValue">${acc.displayName}</div>
                    </div>
                    <div class="settingsAuthAccountDetailPane">
                        <div class="settingsAuthAccountDetailTitle">UUID</div>
                        <div class="settingsAuthAccountDetailValue">${acc.uuid}</div>
                    </div>
                </div>
                <div class="settingsAuthAccountActions">
                    <button class="settingsAuthAccountSelect" ${selectedUUID===acc.uuid?"selected>Compte sélectionné &#10004;":">Sélectionner un compte"}</button>
                    <div class="settingsAuthAccountWrapper">
                        <button class="settingsAuthAccountLogOut">Se déconnecter</button>
                    </div>
                </div>
            </div>
        </div>`});settingsCurrentAccounts.innerHTML=authAccountStr}function prepareAccountsTab(){populateAuthAccounts();bindAuthAccountSelect();bindAuthAccountLogOut()}function prepareLauncherTab(){resolveServerCodesForUI();bindServerCodeButtons()}document.getElementById("settingsGameWidth").addEventListener("keydown",e=>{if(/^[-.eE]$/.test(e.key)){e.preventDefault()}});document.getElementById("settingsGameHeight").addEventListener("keydown",e=>{if(/^[-.eE]$/.test(e.key)){e.preventDefault()}});const settingsModsContainer=document.getElementById("settingsModsContainer");function resolveModsForUI(){const serv=ConfigManager.getSelectedServer();const distro=DistroManager.getDistribution();const servConf=ConfigManager.getModConfiguration(serv);const modStr=parseModulesForUI(distro.getServer(serv).getModules(),false,servConf.mods);document.getElementById("settingsReqModsContent").innerHTML=modStr.reqMods;document.getElementById("settingsOptModsContent").innerHTML=modStr.optMods}function parseModulesForUI(mdls,submodules,servConf){let reqMods="";let optMods="";for(const mdl of mdls){if(mdl.getType()===DistroManager.Types.ForgeMod||mdl.getType()===DistroManager.Types.LiteMod||mdl.getType()===DistroManager.Types.LiteLoader){if(mdl.getRequired().isRequired()){reqMods+=`<div id="${mdl.getVersionlessID()}" class="settingsBaseMod settings${submodules?"Sub":""}Mod" enabled>
                    <div class="settingsModContent">
                        <div class="settingsModMainWrapper">
                            <div class="settingsModStatus"></div>
                            <div class="settingsModDetails">
                                <span class="settingsModName">${mdl.getName()}</span>
                                <span class="settingsModVersion">v${mdl.getVersion()}</span>
                            </div>
                        </div>
                        <label class="toggleSwitch" reqmod>
                            <input type="checkbox" checked>
                            <span class="toggleSwitchSlider"></span>
                        </label>
                    </div>
                    ${mdl.hasSubModules()?`<div class="settingsSubModContainer">
                        ${Object.values(parseModulesForUI(mdl.getSubModules(),true,servConf[mdl.getVersionlessID()])).join("")}
                    </div>`:""}
                </div>`}else{const conf=servConf[mdl.getVersionlessID()];const val=typeof conf==="object"?conf.value:conf;optMods+=`<div id="${mdl.getVersionlessID()}" class="settingsBaseMod settings${submodules?"Sub":""}Mod" ${val?"enabled":""}>
                    <div class="settingsModContent">
                        <div class="settingsModMainWrapper">
                            <div class="settingsModStatus"></div>
                            <div class="settingsModDetails">
                                <span class="settingsModName">${mdl.getName()}</span>
                                <span class="settingsModVersion">v${mdl.getVersion()}</span>
                            </div>
                        </div>
                        <label class="toggleSwitch">
                            <input type="checkbox" formod="${mdl.getVersionlessID()}" ${val?"checked":""}>
                            <span class="toggleSwitchSlider"></span>
                        </label>
                    </div>
                    ${mdl.hasSubModules()?`<div class="settingsSubModContainer">
                        ${Object.values(parseModulesForUI(mdl.getSubModules(),true,conf.mods)).join("")}
                    </div>`:""}
                </div>`}}}return{reqMods:reqMods,optMods:optMods}}function bindModsToggleSwitch(){const sEls=settingsModsContainer.querySelectorAll("[formod]");Array.from(sEls).map((v,index,arr)=>{v.onchange=()=>{if(v.checked){document.getElementById(v.getAttribute("formod")).setAttribute("enabled","")}else{document.getElementById(v.getAttribute("formod")).removeAttribute("enabled")}}})}function saveModConfiguration(){const serv=ConfigManager.getSelectedServer();const modConf=ConfigManager.getModConfiguration(serv);modConf.mods=_saveModConfiguration(modConf.mods);ConfigManager.setModConfiguration(serv,modConf)}function _saveModConfiguration(modConf){for(let m of Object.entries(modConf)){const tSwitch=settingsModsContainer.querySelectorAll(`[formod='${m[0]}']`);if(!tSwitch[0].hasAttribute("dropin")){if(typeof m[1]==="boolean"){modConf[m[0]]=tSwitch[0].checked}else{if(m[1]!=null){if(tSwitch.length>0){modConf[m[0]].value=tSwitch[0].checked}modConf[m[0]].mods=_saveModConfiguration(modConf[m[0]].mods)}}}}return modConf}let CACHE_SETTINGS_MODS_DIR;let CACHE_DROPIN_MODS;function resolveDropinModsForUI(){const serv=DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer());CACHE_SETTINGS_MODS_DIR=path.join(ConfigManager.getInstanceDirectory(),serv.getID(),"mods");CACHE_DROPIN_MODS=DropinModUtil.scanForDropinMods(CACHE_SETTINGS_MODS_DIR,serv.getMinecraftVersion());let dropinMods="";for(dropin of CACHE_DROPIN_MODS){dropinMods+=`<div id="${dropin.fullName}" class="settingsBaseMod settingsDropinMod" ${!dropin.disabled?"enabled":""}>
                    <div class="settingsModContent">
                        <div class="settingsModMainWrapper">
                            <div class="settingsModStatus"></div>
                            <div class="settingsModDetails">
                                <span class="settingsModName">${dropin.name}</span>
                                <div class="settingsDropinRemoveWrapper">
                                    <button class="settingsDropinRemoveButton" remmod="${dropin.fullName}">Remove</button>
                                </div>
                            </div>
                        </div>
                        <label class="toggleSwitch">
                            <input type="checkbox" formod="${dropin.fullName}" dropin ${!dropin.disabled?"checked":""}>
                            <span class="toggleSwitchSlider"></span>
                        </label>
                    </div>
                </div>`}document.getElementById("settingsDropinModsContent").innerHTML=dropinMods}function resolveServerCodesForUI(){let servCodes="";for(let servCode of ConfigManager.getServerCodes()){const servs=DistroManager.getDistribution().getServersFromCode(servCode);const valid=servs&&servs.length;servCodes+=`
                <div id="${servCode}" class="settingsServerCode" ${valid?"valid":""}>
                    <div class="settingsServerCodeContent">
                        <div class="settingsServerCodeMainWrapper">
                            <div class="settingsServerCodeStatus"></div>
                            <div class="settingsServerCodeDetails">
                                <span class="settingsServerCodeName">${servCode}</span>
                                <div class="settingsServerCodeServerNamesContent" code="${servCode}">                      
                                </div>
                            </div>
                        </div>
                        <div class="settingsServerCodeRemoveWrapper">
                            <button class="settingsServerCodeRemoveButton" id="settingsRemoveServerCode" remcode="${servCode}">Remove</button>
                        </div>
                    </div>
                </div>
            `}document.getElementById("settingsServerCodesListContent").innerHTML=servCodes;let servNames;for(let ele of document.getElementsByClassName("settingsServerCodeServerNamesContent")){servNames="";const code=ele.getAttribute("code");const servs=DistroManager.getDistribution().getServersFromCode(code);const valid=servs&&servs.length;if(valid){for(let serv of servs){loggerSettings.log("server: "+serv.getName());servNames+=`
                    <span class="settingsServerCodeServerName">${serv.getName()}</span> 
                    `}}else{servNames=`
                    <span class="settingsServerCodeServerName">Invalid Code</span> 
                `}ele.innerHTML=servNames}}function bindDropinModsRemoveButton(){const sEls=settingsModsContainer.querySelectorAll("[remmod]");Array.from(sEls).map((v,index,arr)=>{v.onclick=async()=>{const fullName=v.getAttribute("remmod");const res=await DropinModUtil.deleteDropinMod(CACHE_SETTINGS_MODS_DIR,fullName);if(res){document.getElementById(fullName).remove()}else{setOverlayContent(`Failed to Delete<br>Drop-in Mod ${fullName}`,"Make sure the file is not in use and try again.","Okay");setOverlayHandler(null);toggleOverlay(true)}}})}function bindDropinModFileSystemButton(){const fsBtn=document.getElementById("settingsDropinFileSystemButton");fsBtn.onclick=()=>{DropinModUtil.validateDir(CACHE_SETTINGS_MODS_DIR);shell.openPath(CACHE_SETTINGS_MODS_DIR)};fsBtn.ondragenter=e=>{e.dataTransfer.dropEffect="move";fsBtn.setAttribute("drag","");e.preventDefault()};fsBtn.ondragover=e=>{e.preventDefault()};fsBtn.ondragleave=e=>{fsBtn.removeAttribute("drag")};fsBtn.ondrop=e=>{fsBtn.removeAttribute("drag");e.preventDefault();DropinModUtil.addDropinMods(e.dataTransfer.files,CACHE_SETTINGS_MODS_DIR);reloadDropinMods()}}function saveDropinModConfiguration(){for(dropin of CACHE_DROPIN_MODS){const dropinUI=document.getElementById(dropin.fullName);if(dropinUI!=null){const dropinUIEnabled=dropinUI.hasAttribute("enabled");if(DropinModUtil.isDropinModEnabled(dropin.fullName)!=dropinUIEnabled){DropinModUtil.toggleDropinMod(CACHE_SETTINGS_MODS_DIR,dropin.fullName,dropinUIEnabled).catch(err=>{if(!isOverlayVisible()){setOverlayContent("Failed to Toggle<br>One or More Drop-in Mods",err.message,"Okay");setOverlayHandler(null);toggleOverlay(true)}})}}}}document.addEventListener("keydown",e=>{if(getCurrentView()===VIEWS.settings&&selectedSettingsTab==="settingsTabMods"){if(e.key==="F5"){reloadDropinMods();saveShaderpackSettings();saveResourcePackSettings();resolveShaderpacksForUI();resolveResourcePacksForUI()}}});function reloadDropinMods(){resolveDropinModsForUI();bindDropinModsRemoveButton();bindDropinModFileSystemButton();bindModsToggleSwitch()}let CACHE_SETTINGS_INSTANCE_DIR;let CACHE_SHADERPACKS;let CACHE_SELECTED_SHADERPACK;let CACHE_RESOURCEPACKS;let CACHE_SELECTED_RESOURCEPACK;function resolveShaderpacksForUI(){const serv=DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer());CACHE_SETTINGS_INSTANCE_DIR=path.join(ConfigManager.getInstanceDirectory(),serv.getID());CACHE_SHADERPACKS=DropinModUtil.scanForShaderpacks(CACHE_SETTINGS_INSTANCE_DIR);CACHE_SELECTED_SHADERPACK=DropinModUtil.getEnabledShaderpack(CACHE_SETTINGS_INSTANCE_DIR);setShadersOptions(CACHE_SHADERPACKS,CACHE_SELECTED_SHADERPACK)}function setShadersOptions(arr,selected){const cont=document.getElementById("settingsShadersOptions");cont.innerHTML="";for(let opt of arr){const d=document.createElement("DIV");d.innerHTML=opt.name;d.setAttribute("value",opt.fullName);if(opt.fullName===selected){d.setAttribute("selected","");document.getElementById("settingsShadersSelected").innerHTML=opt.name}d.addEventListener("click",function(e){this.parentNode.previousElementSibling.innerHTML=this.innerHTML;for(let sib of this.parentNode.children){sib.removeAttribute("selected")}this.setAttribute("selected","");closeSettingsSelect()});cont.appendChild(d)}}function saveShaderpackSettings(){let sel="OFF";for(let opt of document.getElementById("settingsShadersOptions").childNodes){if(opt.hasAttribute("selected")){sel=opt.getAttribute("value")}}DropinModUtil.setEnabledShaderpack(CACHE_SETTINGS_INSTANCE_DIR,sel)}function bindShaderpackButton(){const spBtn=document.getElementById("settingsShaderpackButton");spBtn.onclick=()=>{const p=path.join(CACHE_SETTINGS_INSTANCE_DIR,"shaderpacks");DropinModUtil.validateDir(p);shell.openPath(p)};spBtn.ondragenter=e=>{e.dataTransfer.dropEffect="move";spBtn.setAttribute("drag","");e.preventDefault()};spBtn.ondragover=e=>{e.preventDefault()};spBtn.ondragleave=e=>{spBtn.removeAttribute("drag")};spBtn.ondrop=e=>{spBtn.removeAttribute("drag");e.preventDefault();DropinModUtil.addShaderpacks(e.dataTransfer.files,CACHE_SETTINGS_INSTANCE_DIR);saveShaderpackSettings();resolveShaderpacksForUI()}}function resolveResourcePacksForUI(){const serv=DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer());CACHE_SETTINGS_INSTANCE_DIR=path.join(ConfigManager.getInstanceDirectory(),serv.getID());CACHE_RESOURCEPACKS=DropinModUtil.scanForResourcePacks(CACHE_SETTINGS_INSTANCE_DIR);CACHE_SELECTED_RESOURCEPACK=DropinModUtil.getEnabledResourcePack(CACHE_SETTINGS_INSTANCE_DIR);setResourcePackOptions(CACHE_RESOURCEPACKS,CACHE_SELECTED_RESOURCEPACK)}function setResourcePackOptions(arr,selected){const cont=document.getElementById("settingsResourcePackOptions");cont.innerHTML="";for(let opt of arr){const d=document.createElement("DIV");d.innerHTML=opt.name;d.setAttribute("value",opt.fullName);if(opt.fullName===selected){d.setAttribute("selected","");document.getElementById("settingsResourcePackSelected").innerHTML=opt.name}d.addEventListener("click",function(e){this.parentNode.previousElementSibling.innerHTML=this.innerHTML;for(let sib of this.parentNode.children){sib.removeAttribute("selected")}this.setAttribute("selected","");closeSettingsSelect()});cont.appendChild(d)}}function saveResourcePackSettings(){let sel="OFF";for(let opt of document.getElementById("settingsResourcePackOptions").childNodes){if(opt.hasAttribute("selected")){sel=opt.getAttribute("value")}}console.log(sel);DropinModUtil.setEnabledResourcePack(CACHE_SETTINGS_INSTANCE_DIR,sel)}function bindResourcePackButton(){const spBtn=document.getElementById("settingsResourcePackButton");spBtn.onclick=()=>{const p=path.join(CACHE_SETTINGS_INSTANCE_DIR,"resourcepacks");DropinModUtil.validateDir(p);shell.openPath(p)};spBtn.ondragenter=e=>{e.dataTransfer.dropEffect="move";spBtn.setAttribute("drag","");e.preventDefault()};spBtn.ondragover=e=>{e.preventDefault()};spBtn.ondragleave=e=>{spBtn.removeAttribute("drag")};spBtn.ondrop=e=>{spBtn.removeAttribute("drag");e.preventDefault();DropinModUtil.addResourcePacks(e.dataTransfer.files,CACHE_SETTINGS_INSTANCE_DIR);saveResourcePackSettings();resolveResourcePacksForUI()}}function loadSelectedServerOnModsTab(){const serv=DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer());document.getElementById("settingsSelServContent").innerHTML=`
        <div class="serverListingDetails">
            <img class="serverListingImg" src="${serv.getIcon()}"/>
            <span class="serverListingName">${serv.getName()}</span>
            <span class="serverListingDescription">${serv.getDescription()}</span>
            <div class="serverListingInfo">
                <div class="serverListingRevision">${serv.getVersion()}</div>
            </div>
        </div>
    `}document.getElementById("settingsSwitchServerButton").addEventListener("click",e=>{e.target.blur();toggleServerSelection(true)});function saveAllModConfigurations(){saveModConfiguration();ConfigManager.save();saveDropinModConfiguration()}function animateModsTabRefresh(){$("#settingsTabMods").fadeOut(150,()=>{prepareModsTab();$("#settingsTabMods").fadeIn(150)})}function prepareModsTab(first){resolveModsForUI();resolveDropinModsForUI();resolveShaderpacksForUI();resolveResourcePacksForUI();bindDropinModsRemoveButton();bindDropinModFileSystemButton();bindShaderpackButton();bindResourcePackButton();bindModsToggleSwitch();loadSelectedServerOnModsTab()}const settingsMaxRAMRange=document.getElementById("settingsMaxRAMRange");const settingsMinRAMRange=document.getElementById("settingsMinRAMRange");const settingsMaxRAMLabel=document.getElementById("settingsMaxRAMLabel");const settingsMinRAMLabel=document.getElementById("settingsMinRAMLabel");const settingsMemoryTotal=document.getElementById("settingsMemoryTotal");const settingsMemoryAvail=document.getElementById("settingsMemoryAvail");const settingsJavaExecDetails=document.getElementById("settingsJavaExecDetails");const SETTINGS_MAX_MEMORY=ConfigManager.getAbsoluteMaxRAM();const SETTINGS_MIN_MEMORY=ConfigManager.getAbsoluteMinRAM();settingsMaxRAMRange.setAttribute("max",SETTINGS_MAX_MEMORY);settingsMaxRAMRange.setAttribute("min",SETTINGS_MIN_MEMORY);settingsMinRAMRange.setAttribute("max",SETTINGS_MAX_MEMORY);settingsMinRAMRange.setAttribute("min",SETTINGS_MIN_MEMORY);settingsMinRAMRange.onchange=e=>{const sMaxV=Number(settingsMaxRAMRange.getAttribute("value"));const sMinV=Number(settingsMinRAMRange.getAttribute("value"));const bar=e.target.getElementsByClassName("rangeSliderBar")[0];const max=(os.totalmem()-1e9)/1e9;if(sMinV>=max/1.25){bar.style.background="#e86060"}else if(sMinV>=max/2){bar.style.background="#e8e18b"}else{bar.style.background=null}if(sMaxV<sMinV){const sliderMeta=calculateRangeSliderMeta(settingsMaxRAMRange);updateRangedSlider(settingsMaxRAMRange,sMinV,(sMinV-sliderMeta.min)/sliderMeta.step*sliderMeta.inc);settingsMaxRAMLabel.innerHTML=sMinV.toFixed(1)+"G"}settingsMinRAMLabel.innerHTML=sMinV.toFixed(1)+"G"};settingsMaxRAMRange.onchange=e=>{const sMaxV=Number(settingsMaxRAMRange.getAttribute("value"));const sMinV=Number(settingsMinRAMRange.getAttribute("value"));const bar=e.target.getElementsByClassName("rangeSliderBar")[0];const max=(os.totalmem()-1e9)/1e9;if(sMaxV>=max/1.25){bar.style.background="#e86060"}else if(sMaxV>=max/2){bar.style.background="#e8e18b"}else{bar.style.background=null}if(sMaxV<sMinV){const sliderMeta=calculateRangeSliderMeta(settingsMaxRAMRange);updateRangedSlider(settingsMinRAMRange,sMaxV,(sMaxV-sliderMeta.min)/sliderMeta.step*sliderMeta.inc);settingsMinRAMLabel.innerHTML=sMaxV.toFixed(1)+"G"}settingsMaxRAMLabel.innerHTML=sMaxV.toFixed(1)+"G"};function calculateRangeSliderMeta(v){const val={max:Number(v.getAttribute("max")),min:Number(v.getAttribute("min")),step:Number(v.getAttribute("step"))};val.ticks=(val.max-val.min)/val.step;val.inc=100/val.ticks;return val}function bindRangeSlider(){Array.from(document.getElementsByClassName("rangeSlider")).map(v=>{const track=v.getElementsByClassName("rangeSliderTrack")[0];const value=v.getAttribute("value");const sliderMeta=calculateRangeSliderMeta(v);updateRangedSlider(v,value,(value-sliderMeta.min)/sliderMeta.step*sliderMeta.inc);track.onmousedown=e=>{document.onmouseup=e=>{document.onmousemove=null;document.onmouseup=null};document.onmousemove=e=>{const diff=e.pageX-v.offsetLeft-track.offsetWidth/2;if(diff>=0&&diff<=v.offsetWidth-track.offsetWidth/2){const perc=diff/v.offsetWidth*100;const notch=Number(perc/sliderMeta.inc).toFixed(0)*sliderMeta.inc;if(Math.abs(perc-notch)<sliderMeta.inc/2){updateRangedSlider(v,sliderMeta.min+sliderMeta.step*(notch/sliderMeta.inc),notch)}}}}})}function updateRangedSlider(element,value,notch){const oldVal=element.getAttribute("value");const bar=element.getElementsByClassName("rangeSliderBar")[0];const track=element.getElementsByClassName("rangeSliderTrack")[0];element.setAttribute("value",value);if(notch<0){notch=0}else if(notch>100){notch=100}const event=new MouseEvent("change",{target:element,type:"change",bubbles:false,cancelable:true});let cancelled=!element.dispatchEvent(event);if(!cancelled){track.style.left=notch+"%";bar.style.width=notch+"%"}else{element.setAttribute("value",oldVal)}}function populateMemoryStatus(){settingsMemoryTotal.innerHTML=Number((os.totalmem()-1e9)/1e9).toFixed(1)+"G";settingsMemoryAvail.innerHTML=Number(os.freemem()/1e9).toFixed(1)+"G"}function populateJavaExecDetails(execPath){const jg=new JavaGuard(DistroManager.getDistribution().getServer(ConfigManager.getSelectedServer()).getMinecraftVersion());jg._validateJavaBinary(execPath).then(v=>{if(v.valid){const vendor=v.vendor!=null?` (${v.vendor})`:"";if(v.version.major<9){settingsJavaExecDetails.innerHTML=`Selected: Java ${v.version.major} Update ${v.version.update} (x${v.arch})${vendor}`}else{settingsJavaExecDetails.innerHTML=`Selected: Java ${v.version.major}.${v.version.minor}.${v.version.revision} (x${v.arch})${vendor}`}}else{settingsJavaExecDetails.innerHTML="Invalid Selection"}})}function prepareJavaTab(){bindRangeSlider();populateMemoryStatus()}const settingsTabAbout=document.getElementById("settingsTabAbout");const settingsAboutChangelogTitle=settingsTabAbout.getElementsByClassName("settingsChangelogTitle")[0];const settingsAboutChangelogText=settingsTabAbout.getElementsByClassName("settingsChangelogText")[0];const settingsAboutChangelogButton=settingsTabAbout.getElementsByClassName("settingsChangelogButton")[0];document.getElementById("settingsAboutDevToolsButton").onclick=e=>{let window=remote.getCurrentWindow();window.toggleDevTools()};function isPrerelease(version){const preRelComp=semver.prerelease(version);if(preRelComp!=null&&preRelComp.includes("release")){return false}return preRelComp!=null&&preRelComp.length>0}function populateVersionInformation(version,valueElement,titleElement,checkElement){valueElement.innerHTML=version;if(isPrerelease(version)){titleElement.innerHTML="Pre-release";titleElement.style.color="#ff886d";checkElement.style.background="#ff886d"}else{titleElement.innerHTML="Stable Release";titleElement.style.color=null;checkElement.style.background=null}}function populateAboutVersionInformation(){populateVersionInformation(remote.app.getVersion(),document.getElementById("settingsAboutCurrentVersionValue"),document.getElementById("settingsAboutCurrentVersionTitle"),document.getElementById("settingsAboutCurrentVersionCheck"))}function populateReleaseNotes(){$.ajax({url:"https://github.com/ModRealms-Network/HeliosLauncher/releases.atom",success:data=>{const version="v"+remote.app.getVersion();const entries=$(data).find("entry");for(let i=0;i<entries.length;i++){const entry=$(entries[i]);let id=entry.find("id").text();id=id.substring(id.lastIndexOf("/")+1);if(id===version){settingsAboutChangelogTitle.innerHTML=entry.find("title").text();settingsAboutChangelogText.innerHTML=entry.find("content").text();settingsAboutChangelogButton.href=entry.find("link").attr("href")}}},timeout:1e4}).catch(err=>{settingsAboutChangelogText.innerHTML="Failed to load release notes."})}function prepareAboutTab(){populateAboutVersionInformation();populateReleaseNotes()}const settingsTabUpdate=document.getElementById("settingsTabUpdate");const settingsUpdateTitle=document.getElementById("settingsUpdateTitle");const settingsUpdateVersionCheck=document.getElementById("settingsUpdateVersionCheck");const settingsUpdateVersionTitle=document.getElementById("settingsUpdateVersionTitle");const settingsUpdateVersionValue=document.getElementById("settingsUpdateVersionValue");const settingsUpdateChangelogTitle=settingsTabUpdate.getElementsByClassName("settingsChangelogTitle")[0];const settingsUpdateChangelogText=settingsTabUpdate.getElementsByClassName("settingsChangelogText")[0];const settingsUpdateChangelogCont=settingsTabUpdate.getElementsByClassName("settingsChangelogContainer")[0];const settingsUpdateActionButton=document.getElementById("settingsUpdateActionButton");function settingsUpdateButtonStatus(text,disabled=false,handler=null){settingsUpdateActionButton.innerHTML=text;settingsUpdateActionButton.disabled=disabled;if(handler!=null){settingsUpdateActionButton.onclick=handler}}function populateSettingsUpdateInformation(data){if(data!=null){settingsUpdateTitle.innerHTML=`New ${isPrerelease(data.version)?"Pre-release":"Release"} Available`;settingsUpdateChangelogCont.style.display=null;settingsUpdateChangelogTitle.innerHTML=data.releaseName;settingsUpdateChangelogText.innerHTML=data.releaseNotes;populateVersionInformation(data.version,settingsUpdateVersionValue,settingsUpdateVersionTitle,settingsUpdateVersionCheck);if(process.platform==="darwin"){settingsUpdateButtonStatus('Download from GitHub<span style="font-size: 10px;color: gray;text-shadow: none !important;">Close the launcher and run the dmg to update.</span>',false,()=>{shell.openExternal(data.darwindownload)})}else{settingsUpdateButtonStatus("Downloading...",true)}}else{settingsUpdateTitle.innerHTML="You Are Running the Latest Version";settingsUpdateChangelogCont.style.display="none";populateVersionInformation(remote.app.getVersion(),settingsUpdateVersionValue,settingsUpdateVersionTitle,settingsUpdateVersionCheck);settingsUpdateButtonStatus("Check for Updates",false,()=>{if(!isDev){ipcRenderer.send("autoUpdateAction","checkForUpdate");settingsUpdateButtonStatus("Checking for Updates..",true)}})}}function prepareUpdateTab(data=null){populateSettingsUpdateInformation(data)}function prepareSettings(first=false){if(first){setupSettingsTabs();initSettingsValidators();prepareUpdateTab()}else{prepareModsTab()}initSettingsValues();prepareAccountsTab();prepareJavaTab();prepareLauncherTab();prepareAboutTab()}